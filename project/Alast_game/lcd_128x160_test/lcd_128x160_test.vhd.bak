--FOR EP3C16Q240C8
--dipsw1的dipsw1(5)='1'，dipsw1(6)='0'，dipsw1(7)='0'，
--增加第5功能(
--1.讓照度顯示在七段顯示器
--2.溫濕度顯示tft lcd(顯示紅色"溫度"與藍色"濕度")
--  且可同時顯示32x32 與 16x16 兩種字形
--3.馬達隨溫度高低加減速，
--4.同時語音IC上交替播放照度與溫濕度)


library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.std_logic_arith.all;

entity lcd_128x160_test is
	port(    	      	                                    --接腳說明   
        fin, nReset : in 	std_logic;                     	--震盪輸入(149) & RESET按鈕(145) 
		SD178_sda  	: INOUT STD_LOGIC;                  	--SD178B IIC SDA() 
        SD178_scl  	: INOUT STD_LOGIC;                  	--SD178B IIC SCL()                                                              
        SD178_nrst 	: OUT   STD_LOGIC;                  	--SD178B nRESET ()  
		TSL2561_sda : INOUT STD_LOGIC;                 		--TSL2561 IIC SDA()
        TSL2561_scl : INOUT STD_LOGIC;                 		--TSL2561 IIC SCL()                
		DHT11_PIN 	: inout STD_LOGIC;                   	-- DHT11 PIN
        dipsw1    	: IN 	std_logic_vector(3 downto 0);   --DIP SW()
        key_col   	: IN 	std_logic_vector(3 downto 0);   --KEYBOARD ()               
        key_scan  	: OUT  	std_logic_vector(3 downto 0);  
        debug  		: OUT  	std_logic_vector(7 downto 0);  
        	bz:out STD_LOGIC;
        segout  	:out 	std_logic_vector(7 downto 0);   --左邊七段顯示器資料腳()
        segsel  	:out 	std_logic_vector(3 downto 0);   --左邊七段顯示器掃描腳()           
        
        BL,RES,CS,DC,SDA,SCL : OUT    STD_LOGIC;        		--LCD 
		LED: buffer	std_logic_vector(15 downto 0)
	 );
end lcd_128x160_test;
architecture beh of lcd_128x160_test is
component lcdControl is
port (  clk : in std_logic;
        nReset: in std_logic;
        mode_lcd: in integer range 0 to 15; 
        HU_BUFF, TE_BUFF : in STD_LOGIC_VECTOR(7 DOWNTO 0);  
        TSL2561_data : STD_LOGIC_VECTOR(19 DOWNTO 0);
        key_pressed: in std_logic ;
        workingMode: in std_logic_vector(3 downto 0) ;
        --BL,RES,CS,DC,SDA,SCL : OUT    STD_LOGIC       ; --LCD 
        
        lcd_busy  : in    STD_LOGIC;                     
        lcd_write, lcd_show  : out  STD_LOGIC ;
        lcd_address          : buffer  std_logic_vector(14 downto 0);
        lcd_color            : out  std_logic_vector(5 DOWNTO 0) 
       );
end component lcdControl;
component clock_generator is
port( 
     fin:in std_logic;    
     clk_1MHz:buffer std_logic ;
     clk_1KHz:buffer std_logic ;
     clk_100Hz:buffer std_logic ;
     clk_1Hz:buffer std_logic  
    );
end component clock_generator;

component LCD_DRV is
port(								                            --接腳說明   
        fin, nReset  :in std_logic;                    --震盪輸入(149) & RESET按鈕(145) 
        BL,RES,CS,DC,SDA,SCL : OUT    STD_LOGIC;       --LCD 
        lcd_busy  : OUT    STD_LOGIC;                  
        lcd_write, lcd_show  : in  STD_LOGIC ;
        lcd_address          : in  std_logic_vector(14 downto 0);
        lcd_color            : in  std_logic_vector(5 DOWNTO 0)               

    );
end component LCD_DRV;

type State_type4 is (event_check, button_process );
SIGNAL  Main_State  : State_type4;                
--other
SIGNAL  clk_1KHz,clk_1MHz, clk_100hz, clk_1hz : STD_LOGIC;        
SIGNAL  mode_lcd, mode_7seg, mode_sd178, mode_motor   :integer range 0 to 15;
SIGNAL  motor_speed   :integer range 0 to 10;
SIGNAL  motor_dir : STD_LOGIC;        
--LCD   
SIGNAL  lcd_write, lcd_show, lcd_busy    : std_logic;
SIGNAL  lcd_address          : std_logic_vector(14 downto 0);
SIGNAL  lcd_color            : std_logic_vector(5 DOWNTO 0);  

SIGNAL  segCounter            : std_logic_vector(15 DOWNTO 0):="0000000000000000"; 
signal idx: integer range 0 to 127:=0;
begin  
	--debug <=  clk_1hz & key_pressed & (not workingMode); 
	LED(7 downto 0) <=  SD178_debug & workingMode & actionID;
	actionID <= dipsw1(2 downto 0) ;
	bz<='1';
	process(key_pressed)
 	begin
		if(rising_edge(key_pressed))then
			workingMode <= number ;
		end if;
 	end process;
	
	process(clk_1hz)
	begin
		if(nReset='0')then
			segCounter <= "0000000000000000";
		elsif(rising_edge(clk_1hz))then
			segCounter <= segCounter +1;
		end if ;
	end process;
	
 	       
 	process(nReset,clk_1MHz)            --按鍵控制
      variable delay_1   :integer range 0 to 100;   	         
      variable i,j         :integer range 0 to 100;
      variable dbg: std_logic_vector(5 downto 0); 
 	begin	  
      if(nReset='0')then
         mode_lcd   <= 0;          
         delay_1   := 0;    
		 dbg := "111111";

         Main_State  <= event_check;            

      ELSIF(clk_1MHz'EVENT AND clk_1MHz='1')then   

         CASE Main_State IS                
            
            when event_check=>       
            	if (key_pressed = '1') then 
         	         --產生EVENT PULSE
         	         delay_1 :=0; 
         	         --j := to_integer(unsigned(workingMode));
         	         Main_State <= button_process; 
         	         --
               	     if(workingMode = "0000") then       -- 按下KEY1   i-->j      	                  	         	      
               	        if(actionID = "000") then  
               	           mode_lcd  <= 0;   
                        elsif(actionID = "001") then     
                           mode_lcd  <= 1;        
                        elsif(actionID = "010") then         	         
                           mode_lcd  <= 2;     
                           mode_7seg <= 0;
                           mode_sd178 <= 0;
                           mode_motor <= 2; 
                        elsif(actionID = "011") then         	         
                           mode_lcd   <= 3;   
                        elsif(actionID = "100") then         	         
                           mode_lcd  <= 4;    
               	        end if;            	      
               	        
               	     elsif(workingMode = "0010")  then    -- 按下KEY3   i-->j            	                     	      
               	        if(actionID = "000") then         	                  	         
               	           mode_lcd  <= 0;     
               	           mode_7seg <= 0;
               	           mode_sd178 <= 0;
                        elsif(actionID = "001") then         	         
                           mode_7seg  <= 1;                                   --停止顯示溫度  
                           mode_motor <= 0;                                   --停止馬達   
                        elsif(actionID = "010") then         	         
                           mode_7seg  <= 0;     
                           mode_motor <= 0;                                   --停止馬達                        
                        elsif(actionID = "011") then         	         
               	           mode_sd178 <= 0;
                        elsif(actionID = "100") then         	         
                           mode_7seg  <= 1;                                   --停止顯示光強度   	         
               	           mode_sd178 <= 0;                                       
                           mode_motor <= 0;          
               	        end if;   
                 	end if;	         	         
                end if;           
                                                                                                                                                
            when button_process =>              		   
                  if delay_1 >= 10 then                                   -- 產生10us觸發訊號 ,button_event                        
          		      if(key_pressed = '0')  then  
                        delay_1 :=0;                                                     
                        Main_State <= event_check;                                                                       
                     end if;                           
                  else
                     delay_1:= delay_1+1;
                  end if;  
                      
            when others =>  
                      Main_State <= event_check;                                                                        
                          
            END CASE;            
      end if; 	   
 	end process; 	         
          
   ------------------------------------------------------------------------零件庫 
           
   u4:clock_generator
   port map(    
			  fin    => fin,  
			  clk_1MHz   => clk_1MHz , 
			  clk_1KHz   => clk_1KHz ,  
			  clk_100Hz   => clk_100hz,
	          clk_1Hz   => clk_1hz 
    );

   u6: lcdControl
	port map(  
			clk 			=> fin,
        nReset 			=> nReset,
        mode_lcd		=> mode_lcd,
        HU_BUFF			=> "00000000", 
        TE_BUFF  		=> "00000000", 
        TSL2561_data		=> X"00000",
        key_pressed 	=> key_pressed,
        workingMode 	=> workingMode,
        
        
        lcd_address 	=> lcd_address,
        lcd_color   	=> lcd_color, 
        lcd_write 		=> lcd_write, 
        lcd_show  		=> lcd_show,  
        lcd_busy  		=> lcd_busy  
       );
   u8:LCD_DRV           --LCD 驅動
   port map(      
		fin       		=> fin,       
		nReset    		=> nReset,        
		BL        		=> BL,
		RES       		=> RES,
		CS        		=> CS,
		DC        		=> DC,
		SDA       		=> SDA,
		SCL       		=> SCL,
                
		lcd_address => lcd_address,
		lcd_color   => lcd_color, 
		lcd_write => lcd_write, 
		lcd_show  => lcd_show,  
		lcd_busy  => lcd_busy           
   ); 
                 
end beh;
